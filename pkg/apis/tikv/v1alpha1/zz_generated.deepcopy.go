//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright  TiKV Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommonListenerSpec) DeepCopyInto(out *CommonListenerSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommonListenerSpec.
func (in *CommonListenerSpec) DeepCopy() *CommonListenerSpec {
	if in == nil {
		return nil
	}
	out := new(CommonListenerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentSpec) DeepCopyInto(out *ComponentSpec) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.ImagePullPolicy != nil {
		in, out := &in.ImagePullPolicy, &out.ImagePullPolicy
		*out = new(v1.PullPolicy)
		**out = **in
	}
	if in.HostNetwork != nil {
		in, out := &in.HostNetwork, &out.HostNetwork
		*out = new(bool)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.SchedulerName != nil {
		in, out := &in.SchedulerName, &out.SchedulerName
		*out = new(string)
		**out = **in
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodSecurityContext != nil {
		in, out := &in.PodSecurityContext, &out.PodSecurityContext
		*out = new(v1.PodSecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.ConfigUpdateStrategy != nil {
		in, out := &in.ConfigUpdateStrategy, &out.ConfigUpdateStrategy
		*out = new(ConfigUpdateStrategy)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]v1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentSpec.
func (in *ComponentSpec) DeepCopy() *ComponentSpec {
	if in == nil {
		return nil
	}
	out := new(ComponentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DashboardConfig) DeepCopyInto(out *DashboardConfig) {
	*out = *in
	if in.TiDBCAPath != nil {
		in, out := &in.TiDBCAPath, &out.TiDBCAPath
		*out = new(string)
		**out = **in
	}
	if in.TiDBCertPath != nil {
		in, out := &in.TiDBCertPath, &out.TiDBCertPath
		*out = new(string)
		**out = **in
	}
	if in.TiDBKeyPath != nil {
		in, out := &in.TiDBKeyPath, &out.TiDBKeyPath
		*out = new(string)
		**out = **in
	}
	if in.PublicPathPrefix != nil {
		in, out := &in.PublicPathPrefix, &out.PublicPathPrefix
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DashboardConfig.
func (in *DashboardConfig) DeepCopy() *DashboardConfig {
	if in == nil {
		return nil
	}
	out := new(DashboardConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscoverySpec) DeepCopyInto(out *DiscoverySpec) {
	*out = *in
	in.ResourceRequirements.DeepCopyInto(&out.ResourceRequirements)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscoverySpec.
func (in *DiscoverySpec) DeepCopy() *DiscoverySpec {
	if in == nil {
		return nil
	}
	out := new(DiscoverySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalListenerConfig) DeepCopyInto(out *ExternalListenerConfig) {
	*out = *in
	out.CommonListenerSpec = in.CommonListenerSpec
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalListenerConfig.
func (in *ExternalListenerConfig) DeepCopy() *ExternalListenerConfig {
	if in == nil {
		return nil
	}
	out := new(ExternalListenerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileLogConfig) DeepCopyInto(out *FileLogConfig) {
	*out = *in
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.LogRotate != nil {
		in, out := &in.LogRotate, &out.LogRotate
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(int)
		**out = **in
	}
	if in.MaxDays != nil {
		in, out := &in.MaxDays, &out.MaxDays
		*out = new(int)
		**out = **in
	}
	if in.MaxBackups != nil {
		in, out := &in.MaxBackups, &out.MaxBackups
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileLogConfig.
func (in *FileLogConfig) DeepCopy() *FileLogConfig {
	if in == nil {
		return nil
	}
	out := new(FileLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListenersConfig) DeepCopyInto(out *ListenersConfig) {
	*out = *in
	if in.ExternalListeners != nil {
		in, out := &in.ExternalListeners, &out.ExternalListeners
		*out = make([]ExternalListenerConfig, len(*in))
		copy(*out, *in)
	}
	if in.ServiceAnnotations != nil {
		in, out := &in.ServiceAnnotations, &out.ServiceAnnotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListenersConfig.
func (in *ListenersConfig) DeepCopy() *ListenersConfig {
	if in == nil {
		return nil
	}
	out := new(ListenersConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterKeyFileConfig) DeepCopyInto(out *MasterKeyFileConfig) {
	*out = *in
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterKeyFileConfig.
func (in *MasterKeyFileConfig) DeepCopy() *MasterKeyFileConfig {
	if in == nil {
		return nil
	}
	out := new(MasterKeyFileConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterKeyKMSConfig) DeepCopyInto(out *MasterKeyKMSConfig) {
	*out = *in
	if in.KeyID != nil {
		in, out := &in.KeyID, &out.KeyID
		*out = new(string)
		**out = **in
	}
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterKeyKMSConfig.
func (in *MasterKeyKMSConfig) DeepCopy() *MasterKeyKMSConfig {
	if in == nil {
		return nil
	}
	out := new(MasterKeyKMSConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDConfig) DeepCopyInto(out *PDConfig) {
	*out = *in
	if in.ForceNewCluster != nil {
		in, out := &in.ForceNewCluster, &out.ForceNewCluster
		*out = new(bool)
		**out = **in
	}
	if in.EnableGRPCGateway != nil {
		in, out := &in.EnableGRPCGateway, &out.EnableGRPCGateway
		*out = new(bool)
		**out = **in
	}
	if in.LeaderLease != nil {
		in, out := &in.LeaderLease, &out.LeaderLease
		*out = new(int64)
		**out = **in
	}
	if in.Log != nil {
		in, out := &in.Log, &out.Log
		*out = new(PDLogConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.LogFileDeprecated != nil {
		in, out := &in.LogFileDeprecated, &out.LogFileDeprecated
		*out = new(string)
		**out = **in
	}
	if in.LogLevelDeprecated != nil {
		in, out := &in.LogLevelDeprecated, &out.LogLevelDeprecated
		*out = new(string)
		**out = **in
	}
	if in.TsoSaveInterval != nil {
		in, out := &in.TsoSaveInterval, &out.TsoSaveInterval
		*out = new(string)
		**out = **in
	}
	if in.Metric != nil {
		in, out := &in.Metric, &out.Metric
		*out = new(PDMetricConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(PDScheduleConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(PDReplicationConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = make(map[string]PDNamespaceConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.PDServerCfg != nil {
		in, out := &in.PDServerCfg, &out.PDServerCfg
		*out = new(PDServerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.QuotaBackendBytes != nil {
		in, out := &in.QuotaBackendBytes, &out.QuotaBackendBytes
		*out = new(string)
		**out = **in
	}
	if in.AutoCompactionMode != nil {
		in, out := &in.AutoCompactionMode, &out.AutoCompactionMode
		*out = new(string)
		**out = **in
	}
	if in.AutoCompactionRetention != nil {
		in, out := &in.AutoCompactionRetention, &out.AutoCompactionRetention
		*out = new(string)
		**out = **in
	}
	if in.TickInterval != nil {
		in, out := &in.TickInterval, &out.TickInterval
		*out = new(string)
		**out = **in
	}
	if in.ElectionInterval != nil {
		in, out := &in.ElectionInterval, &out.ElectionInterval
		*out = new(string)
		**out = **in
	}
	if in.PreVote != nil {
		in, out := &in.PreVote, &out.PreVote
		*out = new(bool)
		**out = **in
	}
	if in.Security != nil {
		in, out := &in.Security, &out.Security
		*out = new(PDSecurityConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.LabelProperty != nil {
		in, out := &in.LabelProperty, &out.LabelProperty
		*out = new(PDLabelPropertyConfig)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]PDStoreLabels, len(*in))
			for key, val := range *in {
				var outVal []PDStoreLabel
				if val == nil {
					(*out)[key] = nil
				} else {
					in, out := &val, &outVal
					*out = make(PDStoreLabels, len(*in))
					for i := range *in {
						(*in)[i].DeepCopyInto(&(*out)[i])
					}
				}
				(*out)[key] = outVal
			}
		}
	}
	if in.NamespaceClassifier != nil {
		in, out := &in.NamespaceClassifier, &out.NamespaceClassifier
		*out = new(string)
		**out = **in
	}
	if in.Dashboard != nil {
		in, out := &in.Dashboard, &out.Dashboard
		*out = new(DashboardConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDConfig.
func (in *PDConfig) DeepCopy() *PDConfig {
	if in == nil {
		return nil
	}
	out := new(PDConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDFailureMember) DeepCopyInto(out *PDFailureMember) {
	*out = *in
	in.CreatedAt.DeepCopyInto(&out.CreatedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDFailureMember.
func (in *PDFailureMember) DeepCopy() *PDFailureMember {
	if in == nil {
		return nil
	}
	out := new(PDFailureMember)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PDLabelPropertyConfig) DeepCopyInto(out *PDLabelPropertyConfig) {
	{
		in := &in
		*out = make(PDLabelPropertyConfig, len(*in))
		for key, val := range *in {
			var outVal []PDStoreLabel
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make(PDStoreLabels, len(*in))
				for i := range *in {
					(*in)[i].DeepCopyInto(&(*out)[i])
				}
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDLabelPropertyConfig.
func (in PDLabelPropertyConfig) DeepCopy() PDLabelPropertyConfig {
	if in == nil {
		return nil
	}
	out := new(PDLabelPropertyConfig)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDLogConfig) DeepCopyInto(out *PDLogConfig) {
	*out = *in
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(string)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.DisableTimestamp != nil {
		in, out := &in.DisableTimestamp, &out.DisableTimestamp
		*out = new(bool)
		**out = **in
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		*out = new(FileLogConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Development != nil {
		in, out := &in.Development, &out.Development
		*out = new(bool)
		**out = **in
	}
	if in.DisableCaller != nil {
		in, out := &in.DisableCaller, &out.DisableCaller
		*out = new(bool)
		**out = **in
	}
	if in.DisableStacktrace != nil {
		in, out := &in.DisableStacktrace, &out.DisableStacktrace
		*out = new(bool)
		**out = **in
	}
	if in.DisableErrorVerbose != nil {
		in, out := &in.DisableErrorVerbose, &out.DisableErrorVerbose
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDLogConfig.
func (in *PDLogConfig) DeepCopy() *PDLogConfig {
	if in == nil {
		return nil
	}
	out := new(PDLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDMember) DeepCopyInto(out *PDMember) {
	*out = *in
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDMember.
func (in *PDMember) DeepCopy() *PDMember {
	if in == nil {
		return nil
	}
	out := new(PDMember)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDMetricConfig) DeepCopyInto(out *PDMetricConfig) {
	*out = *in
	if in.PushJob != nil {
		in, out := &in.PushJob, &out.PushJob
		*out = new(string)
		**out = **in
	}
	if in.PushAddress != nil {
		in, out := &in.PushAddress, &out.PushAddress
		*out = new(string)
		**out = **in
	}
	if in.PushInterval != nil {
		in, out := &in.PushInterval, &out.PushInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDMetricConfig.
func (in *PDMetricConfig) DeepCopy() *PDMetricConfig {
	if in == nil {
		return nil
	}
	out := new(PDMetricConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDNamespaceConfig) DeepCopyInto(out *PDNamespaceConfig) {
	*out = *in
	if in.LeaderScheduleLimit != nil {
		in, out := &in.LeaderScheduleLimit, &out.LeaderScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.RegionScheduleLimit != nil {
		in, out := &in.RegionScheduleLimit, &out.RegionScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.ReplicaScheduleLimit != nil {
		in, out := &in.ReplicaScheduleLimit, &out.ReplicaScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.MergeScheduleLimit != nil {
		in, out := &in.MergeScheduleLimit, &out.MergeScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.HotRegionScheduleLimit != nil {
		in, out := &in.HotRegionScheduleLimit, &out.HotRegionScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.MaxReplicas != nil {
		in, out := &in.MaxReplicas, &out.MaxReplicas
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDNamespaceConfig.
func (in *PDNamespaceConfig) DeepCopy() *PDNamespaceConfig {
	if in == nil {
		return nil
	}
	out := new(PDNamespaceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDReplicationConfig) DeepCopyInto(out *PDReplicationConfig) {
	*out = *in
	if in.MaxReplicas != nil {
		in, out := &in.MaxReplicas, &out.MaxReplicas
		*out = new(uint64)
		**out = **in
	}
	if in.LocationLabels != nil {
		in, out := &in.LocationLabels, &out.LocationLabels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.StrictlyMatchLabel != nil {
		in, out := &in.StrictlyMatchLabel, &out.StrictlyMatchLabel
		*out = new(bool)
		**out = **in
	}
	if in.EnablePlacementRules != nil {
		in, out := &in.EnablePlacementRules, &out.EnablePlacementRules
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDReplicationConfig.
func (in *PDReplicationConfig) DeepCopy() *PDReplicationConfig {
	if in == nil {
		return nil
	}
	out := new(PDReplicationConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDScheduleConfig) DeepCopyInto(out *PDScheduleConfig) {
	*out = *in
	if in.MaxSnapshotCount != nil {
		in, out := &in.MaxSnapshotCount, &out.MaxSnapshotCount
		*out = new(uint64)
		**out = **in
	}
	if in.MaxPendingPeerCount != nil {
		in, out := &in.MaxPendingPeerCount, &out.MaxPendingPeerCount
		*out = new(uint64)
		**out = **in
	}
	if in.MaxMergeRegionSize != nil {
		in, out := &in.MaxMergeRegionSize, &out.MaxMergeRegionSize
		*out = new(uint64)
		**out = **in
	}
	if in.MaxMergeRegionKeys != nil {
		in, out := &in.MaxMergeRegionKeys, &out.MaxMergeRegionKeys
		*out = new(uint64)
		**out = **in
	}
	if in.SplitMergeInterval != nil {
		in, out := &in.SplitMergeInterval, &out.SplitMergeInterval
		*out = new(string)
		**out = **in
	}
	if in.PatrolRegionInterval != nil {
		in, out := &in.PatrolRegionInterval, &out.PatrolRegionInterval
		*out = new(string)
		**out = **in
	}
	if in.MaxStoreDownTime != nil {
		in, out := &in.MaxStoreDownTime, &out.MaxStoreDownTime
		*out = new(string)
		**out = **in
	}
	if in.LeaderScheduleLimit != nil {
		in, out := &in.LeaderScheduleLimit, &out.LeaderScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.RegionScheduleLimit != nil {
		in, out := &in.RegionScheduleLimit, &out.RegionScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.ReplicaScheduleLimit != nil {
		in, out := &in.ReplicaScheduleLimit, &out.ReplicaScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.MergeScheduleLimit != nil {
		in, out := &in.MergeScheduleLimit, &out.MergeScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.HotRegionScheduleLimit != nil {
		in, out := &in.HotRegionScheduleLimit, &out.HotRegionScheduleLimit
		*out = new(uint64)
		**out = **in
	}
	if in.HotRegionCacheHitsThreshold != nil {
		in, out := &in.HotRegionCacheHitsThreshold, &out.HotRegionCacheHitsThreshold
		*out = new(uint64)
		**out = **in
	}
	if in.TolerantSizeRatio != nil {
		in, out := &in.TolerantSizeRatio, &out.TolerantSizeRatio
		*out = new(float64)
		**out = **in
	}
	if in.LowSpaceRatio != nil {
		in, out := &in.LowSpaceRatio, &out.LowSpaceRatio
		*out = new(float64)
		**out = **in
	}
	if in.HighSpaceRatio != nil {
		in, out := &in.HighSpaceRatio, &out.HighSpaceRatio
		*out = new(float64)
		**out = **in
	}
	if in.DisableLearner != nil {
		in, out := &in.DisableLearner, &out.DisableLearner
		*out = new(bool)
		**out = **in
	}
	if in.DisableRemoveDownReplica != nil {
		in, out := &in.DisableRemoveDownReplica, &out.DisableRemoveDownReplica
		*out = new(bool)
		**out = **in
	}
	if in.DisableReplaceOfflineReplica != nil {
		in, out := &in.DisableReplaceOfflineReplica, &out.DisableReplaceOfflineReplica
		*out = new(bool)
		**out = **in
	}
	if in.DisableMakeUpReplica != nil {
		in, out := &in.DisableMakeUpReplica, &out.DisableMakeUpReplica
		*out = new(bool)
		**out = **in
	}
	if in.DisableRemoveExtraReplica != nil {
		in, out := &in.DisableRemoveExtraReplica, &out.DisableRemoveExtraReplica
		*out = new(bool)
		**out = **in
	}
	if in.DisableLocationReplacement != nil {
		in, out := &in.DisableLocationReplacement, &out.DisableLocationReplacement
		*out = new(bool)
		**out = **in
	}
	if in.DisableNamespaceRelocation != nil {
		in, out := &in.DisableNamespaceRelocation, &out.DisableNamespaceRelocation
		*out = new(bool)
		**out = **in
	}
	if in.Schedulers != nil {
		in, out := &in.Schedulers, &out.Schedulers
		*out = new(PDSchedulerConfigs)
		if **in != nil {
			in, out := *in, *out
			*out = make([]PDSchedulerConfig, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.SchedulersPayload != nil {
		in, out := &in.SchedulersPayload, &out.SchedulersPayload
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EnableOneWayMerge != nil {
		in, out := &in.EnableOneWayMerge, &out.EnableOneWayMerge
		*out = new(bool)
		**out = **in
	}
	if in.EnableCrossTableMerge != nil {
		in, out := &in.EnableCrossTableMerge, &out.EnableCrossTableMerge
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDScheduleConfig.
func (in *PDScheduleConfig) DeepCopy() *PDScheduleConfig {
	if in == nil {
		return nil
	}
	out := new(PDScheduleConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDSchedulerConfig) DeepCopyInto(out *PDSchedulerConfig) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDSchedulerConfig.
func (in *PDSchedulerConfig) DeepCopy() *PDSchedulerConfig {
	if in == nil {
		return nil
	}
	out := new(PDSchedulerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PDSchedulerConfigs) DeepCopyInto(out *PDSchedulerConfigs) {
	{
		in := &in
		*out = make(PDSchedulerConfigs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDSchedulerConfigs.
func (in PDSchedulerConfigs) DeepCopy() PDSchedulerConfigs {
	if in == nil {
		return nil
	}
	out := new(PDSchedulerConfigs)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDSecurityConfig) DeepCopyInto(out *PDSecurityConfig) {
	*out = *in
	if in.CAPath != nil {
		in, out := &in.CAPath, &out.CAPath
		*out = new(string)
		**out = **in
	}
	if in.CertPath != nil {
		in, out := &in.CertPath, &out.CertPath
		*out = new(string)
		**out = **in
	}
	if in.KeyPath != nil {
		in, out := &in.KeyPath, &out.KeyPath
		*out = new(string)
		**out = **in
	}
	if in.CertAllowedCN != nil {
		in, out := &in.CertAllowedCN, &out.CertAllowedCN
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDSecurityConfig.
func (in *PDSecurityConfig) DeepCopy() *PDSecurityConfig {
	if in == nil {
		return nil
	}
	out := new(PDSecurityConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDServerConfig) DeepCopyInto(out *PDServerConfig) {
	*out = *in
	if in.UseRegionStorage != nil {
		in, out := &in.UseRegionStorage, &out.UseRegionStorage
		*out = new(bool)
		**out = **in
	}
	if in.MetricStorage != nil {
		in, out := &in.MetricStorage, &out.MetricStorage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDServerConfig.
func (in *PDServerConfig) DeepCopy() *PDServerConfig {
	if in == nil {
		return nil
	}
	out := new(PDServerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDSpec) DeepCopyInto(out *PDSpec) {
	*out = *in
	in.ComponentSpec.DeepCopyInto(&out.ComponentSpec)
	in.ResourceRequirements.DeepCopyInto(&out.ResourceRequirements)
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(ServiceSpec)
		(*in).DeepCopyInto(*out)
	}
	in.ListenersConfig.DeepCopyInto(&out.ListenersConfig)
	if in.MaxFailoverCount != nil {
		in, out := &in.MaxFailoverCount, &out.MaxFailoverCount
		*out = new(int32)
		**out = **in
	}
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(PDConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.TLSClientSecretName != nil {
		in, out := &in.TLSClientSecretName, &out.TLSClientSecretName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDSpec.
func (in *PDSpec) DeepCopy() *PDSpec {
	if in == nil {
		return nil
	}
	out := new(PDSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDStatus) DeepCopyInto(out *PDStatus) {
	*out = *in
	if in.StatefulSet != nil {
		in, out := &in.StatefulSet, &out.StatefulSet
		*out = new(appsv1.StatefulSetStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make(map[string]PDMember, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	in.Leader.DeepCopyInto(&out.Leader)
	if in.FailureMembers != nil {
		in, out := &in.FailureMembers, &out.FailureMembers
		*out = make(map[string]PDFailureMember, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.UnjoinedMembers != nil {
		in, out := &in.UnjoinedMembers, &out.UnjoinedMembers
		*out = make(map[string]UnjoinedMember, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDStatus.
func (in *PDStatus) DeepCopy() *PDStatus {
	if in == nil {
		return nil
	}
	out := new(PDStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PDStoreLabel) DeepCopyInto(out *PDStoreLabel) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDStoreLabel.
func (in *PDStoreLabel) DeepCopy() *PDStoreLabel {
	if in == nil {
		return nil
	}
	out := new(PDStoreLabel)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PDStoreLabels) DeepCopyInto(out *PDStoreLabels) {
	{
		in := &in
		*out = make(PDStoreLabels, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PDStoreLabels.
func (in PDStoreLabels) DeepCopy() PDStoreLabels {
	if in == nil {
		return nil
	}
	out := new(PDStoreLabels)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceSpec) DeepCopyInto(out *ServiceSpec) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoadBalancerIP != nil {
		in, out := &in.LoadBalancerIP, &out.LoadBalancerIP
		*out = new(string)
		**out = **in
	}
	if in.ClusterIP != nil {
		in, out := &in.ClusterIP, &out.ClusterIP
		*out = new(string)
		**out = **in
	}
	if in.NodePort != nil {
		in, out := &in.NodePort, &out.NodePort
		*out = new(string)
		**out = **in
	}
	if in.PortName != nil {
		in, out := &in.PortName, &out.PortName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceSpec.
func (in *ServiceSpec) DeepCopy() *ServiceSpec {
	if in == nil {
		return nil
	}
	out := new(ServiceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVBlockCacheConfig) DeepCopyInto(out *TiKVBlockCacheConfig) {
	*out = *in
	if in.Shared != nil {
		in, out := &in.Shared, &out.Shared
		*out = new(bool)
		**out = **in
	}
	if in.Capacity != nil {
		in, out := &in.Capacity, &out.Capacity
		*out = new(string)
		**out = **in
	}
	if in.NumShardBits != nil {
		in, out := &in.NumShardBits, &out.NumShardBits
		*out = new(int64)
		**out = **in
	}
	if in.StrictCapacityLimit != nil {
		in, out := &in.StrictCapacityLimit, &out.StrictCapacityLimit
		*out = new(bool)
		**out = **in
	}
	if in.HighPriPoolRatio != nil {
		in, out := &in.HighPriPoolRatio, &out.HighPriPoolRatio
		*out = new(float64)
		**out = **in
	}
	if in.MemoryAllocator != nil {
		in, out := &in.MemoryAllocator, &out.MemoryAllocator
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVBlockCacheConfig.
func (in *TiKVBlockCacheConfig) DeepCopy() *TiKVBlockCacheConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVBlockCacheConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVCfConfig) DeepCopyInto(out *TiKVCfConfig) {
	*out = *in
	if in.BlockSize != nil {
		in, out := &in.BlockSize, &out.BlockSize
		*out = new(string)
		**out = **in
	}
	if in.BlockCacheSize != nil {
		in, out := &in.BlockCacheSize, &out.BlockCacheSize
		*out = new(string)
		**out = **in
	}
	if in.DisableBlockCache != nil {
		in, out := &in.DisableBlockCache, &out.DisableBlockCache
		*out = new(bool)
		**out = **in
	}
	if in.CacheIndexAndFilterBlocks != nil {
		in, out := &in.CacheIndexAndFilterBlocks, &out.CacheIndexAndFilterBlocks
		*out = new(bool)
		**out = **in
	}
	if in.PinL0FilterAndIndexBlocks != nil {
		in, out := &in.PinL0FilterAndIndexBlocks, &out.PinL0FilterAndIndexBlocks
		*out = new(bool)
		**out = **in
	}
	if in.UseBloomFilter != nil {
		in, out := &in.UseBloomFilter, &out.UseBloomFilter
		*out = new(bool)
		**out = **in
	}
	if in.OptimizeFiltersForHits != nil {
		in, out := &in.OptimizeFiltersForHits, &out.OptimizeFiltersForHits
		*out = new(bool)
		**out = **in
	}
	if in.WholeKeyFiltering != nil {
		in, out := &in.WholeKeyFiltering, &out.WholeKeyFiltering
		*out = new(bool)
		**out = **in
	}
	if in.BloomFilterBitsPerKey != nil {
		in, out := &in.BloomFilterBitsPerKey, &out.BloomFilterBitsPerKey
		*out = new(int64)
		**out = **in
	}
	if in.BlockBasedBloomFilter != nil {
		in, out := &in.BlockBasedBloomFilter, &out.BlockBasedBloomFilter
		*out = new(bool)
		**out = **in
	}
	if in.ReadAmpBytesPerBit != nil {
		in, out := &in.ReadAmpBytesPerBit, &out.ReadAmpBytesPerBit
		*out = new(int64)
		**out = **in
	}
	if in.CompressionPerLevel != nil {
		in, out := &in.CompressionPerLevel, &out.CompressionPerLevel
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WriteBufferSize != nil {
		in, out := &in.WriteBufferSize, &out.WriteBufferSize
		*out = new(string)
		**out = **in
	}
	if in.MaxWriteBufferNumber != nil {
		in, out := &in.MaxWriteBufferNumber, &out.MaxWriteBufferNumber
		*out = new(int64)
		**out = **in
	}
	if in.MinWriteBufferNumberToMerge != nil {
		in, out := &in.MinWriteBufferNumberToMerge, &out.MinWriteBufferNumberToMerge
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesForLevelBase != nil {
		in, out := &in.MaxBytesForLevelBase, &out.MaxBytesForLevelBase
		*out = new(string)
		**out = **in
	}
	if in.TargetFileSizeBase != nil {
		in, out := &in.TargetFileSizeBase, &out.TargetFileSizeBase
		*out = new(string)
		**out = **in
	}
	if in.Level0FileNumCompactionTrigger != nil {
		in, out := &in.Level0FileNumCompactionTrigger, &out.Level0FileNumCompactionTrigger
		*out = new(int64)
		**out = **in
	}
	if in.Level0SlowdownWritesTrigger != nil {
		in, out := &in.Level0SlowdownWritesTrigger, &out.Level0SlowdownWritesTrigger
		*out = new(int64)
		**out = **in
	}
	if in.Level0StopWritesTrigger != nil {
		in, out := &in.Level0StopWritesTrigger, &out.Level0StopWritesTrigger
		*out = new(int64)
		**out = **in
	}
	if in.MaxCompactionBytes != nil {
		in, out := &in.MaxCompactionBytes, &out.MaxCompactionBytes
		*out = new(string)
		**out = **in
	}
	if in.CompactionPri != nil {
		in, out := &in.CompactionPri, &out.CompactionPri
		*out = new(int64)
		**out = **in
	}
	if in.DynamicLevelBytes != nil {
		in, out := &in.DynamicLevelBytes, &out.DynamicLevelBytes
		*out = new(bool)
		**out = **in
	}
	if in.NumLevels != nil {
		in, out := &in.NumLevels, &out.NumLevels
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesForLevelMultiplier != nil {
		in, out := &in.MaxBytesForLevelMultiplier, &out.MaxBytesForLevelMultiplier
		*out = new(int64)
		**out = **in
	}
	if in.CompactionStyle != nil {
		in, out := &in.CompactionStyle, &out.CompactionStyle
		*out = new(int64)
		**out = **in
	}
	if in.DisableAutoCompactions != nil {
		in, out := &in.DisableAutoCompactions, &out.DisableAutoCompactions
		*out = new(bool)
		**out = **in
	}
	if in.SoftPendingCompactionBytesLimit != nil {
		in, out := &in.SoftPendingCompactionBytesLimit, &out.SoftPendingCompactionBytesLimit
		*out = new(string)
		**out = **in
	}
	if in.HardPendingCompactionBytesLimit != nil {
		in, out := &in.HardPendingCompactionBytesLimit, &out.HardPendingCompactionBytesLimit
		*out = new(string)
		**out = **in
	}
	if in.ForceConsistencyChecks != nil {
		in, out := &in.ForceConsistencyChecks, &out.ForceConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.PropSizeIndexDistance != nil {
		in, out := &in.PropSizeIndexDistance, &out.PropSizeIndexDistance
		*out = new(int64)
		**out = **in
	}
	if in.PropKeysIndexDistance != nil {
		in, out := &in.PropKeysIndexDistance, &out.PropKeysIndexDistance
		*out = new(int64)
		**out = **in
	}
	if in.EnableDoublySkiplist != nil {
		in, out := &in.EnableDoublySkiplist, &out.EnableDoublySkiplist
		*out = new(bool)
		**out = **in
	}
	if in.Titan != nil {
		in, out := &in.Titan, &out.Titan
		*out = new(TiKVTitanCfConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVCfConfig.
func (in *TiKVCfConfig) DeepCopy() *TiKVCfConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVCfConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVConfig) DeepCopyInto(out *TiKVConfig) {
	*out = *in
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.LogFile != nil {
		in, out := &in.LogFile, &out.LogFile
		*out = new(string)
		**out = **in
	}
	if in.SlowLogFile != nil {
		in, out := &in.SlowLogFile, &out.SlowLogFile
		*out = new(string)
		**out = **in
	}
	if in.SlowLogThreshold != nil {
		in, out := &in.SlowLogThreshold, &out.SlowLogThreshold
		*out = new(string)
		**out = **in
	}
	if in.LogRotationTimespan != nil {
		in, out := &in.LogRotationTimespan, &out.LogRotationTimespan
		*out = new(string)
		**out = **in
	}
	if in.LogRotationSize != nil {
		in, out := &in.LogRotationSize, &out.LogRotationSize
		*out = new(string)
		**out = **in
	}
	if in.RefreshConfigInterval != nil {
		in, out := &in.RefreshConfigInterval, &out.RefreshConfigInterval
		*out = new(string)
		**out = **in
	}
	if in.PanicWhenUnexpectedKeyOrData != nil {
		in, out := &in.PanicWhenUnexpectedKeyOrData, &out.PanicWhenUnexpectedKeyOrData
		*out = new(bool)
		**out = **in
	}
	if in.Server != nil {
		in, out := &in.Server, &out.Server
		*out = new(TiKVServerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(TiKVStorageConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Raftstore != nil {
		in, out := &in.Raftstore, &out.Raftstore
		*out = new(TiKVRaftstoreConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Rocksdb != nil {
		in, out := &in.Rocksdb, &out.Rocksdb
		*out = new(TiKVDbConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Coprocessor != nil {
		in, out := &in.Coprocessor, &out.Coprocessor
		*out = new(TiKVCoprocessorConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadPool != nil {
		in, out := &in.ReadPool, &out.ReadPool
		*out = new(TiKVReadPoolConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.RaftDB != nil {
		in, out := &in.RaftDB, &out.RaftDB
		*out = new(TiKVRaftDBConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Import != nil {
		in, out := &in.Import, &out.Import
		*out = new(TiKVImportConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.GC != nil {
		in, out := &in.GC, &out.GC
		*out = new(TiKVGCConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PD != nil {
		in, out := &in.PD, &out.PD
		*out = new(TiKVPDConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Security != nil {
		in, out := &in.Security, &out.Security
		*out = new(TiKVSecurityConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.TiKVPessimisticTxn != nil {
		in, out := &in.TiKVPessimisticTxn, &out.TiKVPessimisticTxn
		*out = new(TiKVPessimisticTxn)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVConfig.
func (in *TiKVConfig) DeepCopy() *TiKVConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVCoprocessorConfig) DeepCopyInto(out *TiKVCoprocessorConfig) {
	*out = *in
	if in.SplitRegionOnTable != nil {
		in, out := &in.SplitRegionOnTable, &out.SplitRegionOnTable
		*out = new(bool)
		**out = **in
	}
	if in.BatchSplitLimit != nil {
		in, out := &in.BatchSplitLimit, &out.BatchSplitLimit
		*out = new(int64)
		**out = **in
	}
	if in.RegionMaxSize != nil {
		in, out := &in.RegionMaxSize, &out.RegionMaxSize
		*out = new(string)
		**out = **in
	}
	if in.RegionSplitSize != nil {
		in, out := &in.RegionSplitSize, &out.RegionSplitSize
		*out = new(string)
		**out = **in
	}
	if in.RegionMaxKeys != nil {
		in, out := &in.RegionMaxKeys, &out.RegionMaxKeys
		*out = new(int64)
		**out = **in
	}
	if in.RegionSplitKeys != nil {
		in, out := &in.RegionSplitKeys, &out.RegionSplitKeys
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVCoprocessorConfig.
func (in *TiKVCoprocessorConfig) DeepCopy() *TiKVCoprocessorConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVCoprocessorConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVCoprocessorReadPoolConfig) DeepCopyInto(out *TiKVCoprocessorReadPoolConfig) {
	*out = *in
	if in.HighConcurrency != nil {
		in, out := &in.HighConcurrency, &out.HighConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.NormalConcurrency != nil {
		in, out := &in.NormalConcurrency, &out.NormalConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.LowConcurrency != nil {
		in, out := &in.LowConcurrency, &out.LowConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerHigh != nil {
		in, out := &in.MaxTasksPerWorkerHigh, &out.MaxTasksPerWorkerHigh
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerNormal != nil {
		in, out := &in.MaxTasksPerWorkerNormal, &out.MaxTasksPerWorkerNormal
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerLow != nil {
		in, out := &in.MaxTasksPerWorkerLow, &out.MaxTasksPerWorkerLow
		*out = new(int64)
		**out = **in
	}
	if in.StackSize != nil {
		in, out := &in.StackSize, &out.StackSize
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVCoprocessorReadPoolConfig.
func (in *TiKVCoprocessorReadPoolConfig) DeepCopy() *TiKVCoprocessorReadPoolConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVCoprocessorReadPoolConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVDbConfig) DeepCopyInto(out *TiKVDbConfig) {
	*out = *in
	if in.WalRecoveryMode != nil {
		in, out := &in.WalRecoveryMode, &out.WalRecoveryMode
		*out = new(int64)
		**out = **in
	}
	if in.WalTTLSeconds != nil {
		in, out := &in.WalTTLSeconds, &out.WalTTLSeconds
		*out = new(int64)
		**out = **in
	}
	if in.WalSizeLimit != nil {
		in, out := &in.WalSizeLimit, &out.WalSizeLimit
		*out = new(string)
		**out = **in
	}
	if in.MaxTotalWalSize != nil {
		in, out := &in.MaxTotalWalSize, &out.MaxTotalWalSize
		*out = new(string)
		**out = **in
	}
	if in.MaxBackgroundJobs != nil {
		in, out := &in.MaxBackgroundJobs, &out.MaxBackgroundJobs
		*out = new(int64)
		**out = **in
	}
	if in.MaxManifestFileSize != nil {
		in, out := &in.MaxManifestFileSize, &out.MaxManifestFileSize
		*out = new(string)
		**out = **in
	}
	if in.CreateIfMissing != nil {
		in, out := &in.CreateIfMissing, &out.CreateIfMissing
		*out = new(bool)
		**out = **in
	}
	if in.MaxOpenFiles != nil {
		in, out := &in.MaxOpenFiles, &out.MaxOpenFiles
		*out = new(int64)
		**out = **in
	}
	if in.EnableStatistics != nil {
		in, out := &in.EnableStatistics, &out.EnableStatistics
		*out = new(bool)
		**out = **in
	}
	if in.StatsDumpPeriod != nil {
		in, out := &in.StatsDumpPeriod, &out.StatsDumpPeriod
		*out = new(string)
		**out = **in
	}
	if in.CompactionReadaheadSize != nil {
		in, out := &in.CompactionReadaheadSize, &out.CompactionReadaheadSize
		*out = new(string)
		**out = **in
	}
	if in.InfoLogMaxSize != nil {
		in, out := &in.InfoLogMaxSize, &out.InfoLogMaxSize
		*out = new(string)
		**out = **in
	}
	if in.InfoLogRollTime != nil {
		in, out := &in.InfoLogRollTime, &out.InfoLogRollTime
		*out = new(string)
		**out = **in
	}
	if in.InfoLogKeepLogFileNum != nil {
		in, out := &in.InfoLogKeepLogFileNum, &out.InfoLogKeepLogFileNum
		*out = new(int64)
		**out = **in
	}
	if in.InfoLogDir != nil {
		in, out := &in.InfoLogDir, &out.InfoLogDir
		*out = new(string)
		**out = **in
	}
	if in.RateBytesPerSec != nil {
		in, out := &in.RateBytesPerSec, &out.RateBytesPerSec
		*out = new(string)
		**out = **in
	}
	if in.RateLimiterMode != nil {
		in, out := &in.RateLimiterMode, &out.RateLimiterMode
		*out = new(int64)
		**out = **in
	}
	if in.AutoTuned != nil {
		in, out := &in.AutoTuned, &out.AutoTuned
		*out = new(bool)
		**out = **in
	}
	if in.BytesPerSync != nil {
		in, out := &in.BytesPerSync, &out.BytesPerSync
		*out = new(string)
		**out = **in
	}
	if in.WalBytesPerSync != nil {
		in, out := &in.WalBytesPerSync, &out.WalBytesPerSync
		*out = new(string)
		**out = **in
	}
	if in.MaxSubCompactions != nil {
		in, out := &in.MaxSubCompactions, &out.MaxSubCompactions
		*out = new(int64)
		**out = **in
	}
	if in.WritableFileMaxBufferSize != nil {
		in, out := &in.WritableFileMaxBufferSize, &out.WritableFileMaxBufferSize
		*out = new(string)
		**out = **in
	}
	if in.UseDirectIoForFlushAndCompaction != nil {
		in, out := &in.UseDirectIoForFlushAndCompaction, &out.UseDirectIoForFlushAndCompaction
		*out = new(bool)
		**out = **in
	}
	if in.EnablePipelinedWrite != nil {
		in, out := &in.EnablePipelinedWrite, &out.EnablePipelinedWrite
		*out = new(bool)
		**out = **in
	}
	if in.Defaultcf != nil {
		in, out := &in.Defaultcf, &out.Defaultcf
		*out = new(TiKVCfConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Writecf != nil {
		in, out := &in.Writecf, &out.Writecf
		*out = new(TiKVCfConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Lockcf != nil {
		in, out := &in.Lockcf, &out.Lockcf
		*out = new(TiKVCfConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Raftcf != nil {
		in, out := &in.Raftcf, &out.Raftcf
		*out = new(TiKVCfConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Titan != nil {
		in, out := &in.Titan, &out.Titan
		*out = new(TiKVTitanDBConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVDbConfig.
func (in *TiKVDbConfig) DeepCopy() *TiKVDbConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVDbConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVEncryptionConfig) DeepCopyInto(out *TiKVEncryptionConfig) {
	*out = *in
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.DataKeyRotationPeriod != nil {
		in, out := &in.DataKeyRotationPeriod, &out.DataKeyRotationPeriod
		*out = new(string)
		**out = **in
	}
	if in.MasterKey != nil {
		in, out := &in.MasterKey, &out.MasterKey
		*out = new(TiKVMasterKeyConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PreviousMasterKey != nil {
		in, out := &in.PreviousMasterKey, &out.PreviousMasterKey
		*out = new(TiKVMasterKeyConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVEncryptionConfig.
func (in *TiKVEncryptionConfig) DeepCopy() *TiKVEncryptionConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVEncryptionConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVFailureStore) DeepCopyInto(out *TiKVFailureStore) {
	*out = *in
	in.CreatedAt.DeepCopyInto(&out.CreatedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVFailureStore.
func (in *TiKVFailureStore) DeepCopy() *TiKVFailureStore {
	if in == nil {
		return nil
	}
	out := new(TiKVFailureStore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVGCConfig) DeepCopyInto(out *TiKVGCConfig) {
	*out = *in
	if in.BatchKeys != nil {
		in, out := &in.BatchKeys, &out.BatchKeys
		*out = new(int64)
		**out = **in
	}
	if in.MaxWriteBytesPerSec != nil {
		in, out := &in.MaxWriteBytesPerSec, &out.MaxWriteBytesPerSec
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVGCConfig.
func (in *TiKVGCConfig) DeepCopy() *TiKVGCConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVGCConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVImportConfig) DeepCopyInto(out *TiKVImportConfig) {
	*out = *in
	if in.ImportDir != nil {
		in, out := &in.ImportDir, &out.ImportDir
		*out = new(string)
		**out = **in
	}
	if in.NumThreads != nil {
		in, out := &in.NumThreads, &out.NumThreads
		*out = new(int64)
		**out = **in
	}
	if in.NumImportJobs != nil {
		in, out := &in.NumImportJobs, &out.NumImportJobs
		*out = new(int64)
		**out = **in
	}
	if in.NumImportSstJobs != nil {
		in, out := &in.NumImportSstJobs, &out.NumImportSstJobs
		*out = new(int64)
		**out = **in
	}
	if in.MaxPrepareDuration != nil {
		in, out := &in.MaxPrepareDuration, &out.MaxPrepareDuration
		*out = new(string)
		**out = **in
	}
	if in.RegionSplitSize != nil {
		in, out := &in.RegionSplitSize, &out.RegionSplitSize
		*out = new(string)
		**out = **in
	}
	if in.StreamChannelWindow != nil {
		in, out := &in.StreamChannelWindow, &out.StreamChannelWindow
		*out = new(int64)
		**out = **in
	}
	if in.MaxOpenEngines != nil {
		in, out := &in.MaxOpenEngines, &out.MaxOpenEngines
		*out = new(int64)
		**out = **in
	}
	if in.UploadSpeedLimit != nil {
		in, out := &in.UploadSpeedLimit, &out.UploadSpeedLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVImportConfig.
func (in *TiKVImportConfig) DeepCopy() *TiKVImportConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVImportConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVMasterKeyConfig) DeepCopyInto(out *TiKVMasterKeyConfig) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	in.MasterKeyFileConfig.DeepCopyInto(&out.MasterKeyFileConfig)
	in.MasterKeyKMSConfig.DeepCopyInto(&out.MasterKeyKMSConfig)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVMasterKeyConfig.
func (in *TiKVMasterKeyConfig) DeepCopy() *TiKVMasterKeyConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVMasterKeyConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVPDConfig) DeepCopyInto(out *TiKVPDConfig) {
	*out = *in
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RetryInterval != nil {
		in, out := &in.RetryInterval, &out.RetryInterval
		*out = new(string)
		**out = **in
	}
	if in.RetryMaxCount != nil {
		in, out := &in.RetryMaxCount, &out.RetryMaxCount
		*out = new(int64)
		**out = **in
	}
	if in.RetryLogEvery != nil {
		in, out := &in.RetryLogEvery, &out.RetryLogEvery
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVPDConfig.
func (in *TiKVPDConfig) DeepCopy() *TiKVPDConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVPDConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVPessimisticTxn) DeepCopyInto(out *TiKVPessimisticTxn) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.WaitForLockTimeout != nil {
		in, out := &in.WaitForLockTimeout, &out.WaitForLockTimeout
		*out = new(string)
		**out = **in
	}
	if in.WakeUpDelayDuration != nil {
		in, out := &in.WakeUpDelayDuration, &out.WakeUpDelayDuration
		*out = new(string)
		**out = **in
	}
	if in.Pipelined != nil {
		in, out := &in.Pipelined, &out.Pipelined
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVPessimisticTxn.
func (in *TiKVPessimisticTxn) DeepCopy() *TiKVPessimisticTxn {
	if in == nil {
		return nil
	}
	out := new(TiKVPessimisticTxn)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVRaftDBConfig) DeepCopyInto(out *TiKVRaftDBConfig) {
	*out = *in
	if in.WalRecoveryMode != nil {
		in, out := &in.WalRecoveryMode, &out.WalRecoveryMode
		*out = new(string)
		**out = **in
	}
	if in.WalDir != nil {
		in, out := &in.WalDir, &out.WalDir
		*out = new(string)
		**out = **in
	}
	if in.WalTtlSeconds != nil {
		in, out := &in.WalTtlSeconds, &out.WalTtlSeconds
		*out = new(int64)
		**out = **in
	}
	if in.WalSizeLimit != nil {
		in, out := &in.WalSizeLimit, &out.WalSizeLimit
		*out = new(string)
		**out = **in
	}
	if in.MaxTotalWalSize != nil {
		in, out := &in.MaxTotalWalSize, &out.MaxTotalWalSize
		*out = new(string)
		**out = **in
	}
	if in.MaxBackgroundJobs != nil {
		in, out := &in.MaxBackgroundJobs, &out.MaxBackgroundJobs
		*out = new(int64)
		**out = **in
	}
	if in.MaxManifestFileSize != nil {
		in, out := &in.MaxManifestFileSize, &out.MaxManifestFileSize
		*out = new(string)
		**out = **in
	}
	if in.CreateIfMissing != nil {
		in, out := &in.CreateIfMissing, &out.CreateIfMissing
		*out = new(bool)
		**out = **in
	}
	if in.MaxOpenFiles != nil {
		in, out := &in.MaxOpenFiles, &out.MaxOpenFiles
		*out = new(int64)
		**out = **in
	}
	if in.EnableStatistics != nil {
		in, out := &in.EnableStatistics, &out.EnableStatistics
		*out = new(bool)
		**out = **in
	}
	if in.StatsDumpPeriod != nil {
		in, out := &in.StatsDumpPeriod, &out.StatsDumpPeriod
		*out = new(string)
		**out = **in
	}
	if in.CompactionReadaheadSize != nil {
		in, out := &in.CompactionReadaheadSize, &out.CompactionReadaheadSize
		*out = new(string)
		**out = **in
	}
	if in.InfoLogMaxSize != nil {
		in, out := &in.InfoLogMaxSize, &out.InfoLogMaxSize
		*out = new(string)
		**out = **in
	}
	if in.FnfoLogRollTime != nil {
		in, out := &in.FnfoLogRollTime, &out.FnfoLogRollTime
		*out = new(string)
		**out = **in
	}
	if in.InfoLogKeepLogFileNum != nil {
		in, out := &in.InfoLogKeepLogFileNum, &out.InfoLogKeepLogFileNum
		*out = new(int64)
		**out = **in
	}
	if in.InfoLogDir != nil {
		in, out := &in.InfoLogDir, &out.InfoLogDir
		*out = new(string)
		**out = **in
	}
	if in.MaxSubCompactions != nil {
		in, out := &in.MaxSubCompactions, &out.MaxSubCompactions
		*out = new(int64)
		**out = **in
	}
	if in.WritableFileMaxBufferSize != nil {
		in, out := &in.WritableFileMaxBufferSize, &out.WritableFileMaxBufferSize
		*out = new(string)
		**out = **in
	}
	if in.UseDirectIoForFlushAndCompaction != nil {
		in, out := &in.UseDirectIoForFlushAndCompaction, &out.UseDirectIoForFlushAndCompaction
		*out = new(bool)
		**out = **in
	}
	if in.EnablePipelinedWrite != nil {
		in, out := &in.EnablePipelinedWrite, &out.EnablePipelinedWrite
		*out = new(bool)
		**out = **in
	}
	if in.AllowConcurrentMemtableWrite != nil {
		in, out := &in.AllowConcurrentMemtableWrite, &out.AllowConcurrentMemtableWrite
		*out = new(bool)
		**out = **in
	}
	if in.BytesPerSync != nil {
		in, out := &in.BytesPerSync, &out.BytesPerSync
		*out = new(string)
		**out = **in
	}
	if in.WalBytesPerSync != nil {
		in, out := &in.WalBytesPerSync, &out.WalBytesPerSync
		*out = new(string)
		**out = **in
	}
	if in.Defaultcf != nil {
		in, out := &in.Defaultcf, &out.Defaultcf
		*out = new(TiKVCfConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVRaftDBConfig.
func (in *TiKVRaftDBConfig) DeepCopy() *TiKVRaftDBConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVRaftDBConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVRaftstoreConfig) DeepCopyInto(out *TiKVRaftstoreConfig) {
	*out = *in
	if in.SyncLog != nil {
		in, out := &in.SyncLog, &out.SyncLog
		*out = new(bool)
		**out = **in
	}
	if in.Prevote != nil {
		in, out := &in.Prevote, &out.Prevote
		*out = new(bool)
		**out = **in
	}
	if in.RaftBaseTickInterval != nil {
		in, out := &in.RaftBaseTickInterval, &out.RaftBaseTickInterval
		*out = new(string)
		**out = **in
	}
	if in.RaftHeartbeatTicks != nil {
		in, out := &in.RaftHeartbeatTicks, &out.RaftHeartbeatTicks
		*out = new(int64)
		**out = **in
	}
	if in.RaftElectionTimeoutTicks != nil {
		in, out := &in.RaftElectionTimeoutTicks, &out.RaftElectionTimeoutTicks
		*out = new(int64)
		**out = **in
	}
	if in.RaftEntryMaxSize != nil {
		in, out := &in.RaftEntryMaxSize, &out.RaftEntryMaxSize
		*out = new(string)
		**out = **in
	}
	if in.RaftLogGCTickInterval != nil {
		in, out := &in.RaftLogGCTickInterval, &out.RaftLogGCTickInterval
		*out = new(string)
		**out = **in
	}
	if in.RaftLogGCThreshold != nil {
		in, out := &in.RaftLogGCThreshold, &out.RaftLogGCThreshold
		*out = new(int64)
		**out = **in
	}
	if in.RaftLogGCCountLimit != nil {
		in, out := &in.RaftLogGCCountLimit, &out.RaftLogGCCountLimit
		*out = new(int64)
		**out = **in
	}
	if in.RaftLogGCSizeLimit != nil {
		in, out := &in.RaftLogGCSizeLimit, &out.RaftLogGCSizeLimit
		*out = new(string)
		**out = **in
	}
	if in.RaftEntryCacheLifeTime != nil {
		in, out := &in.RaftEntryCacheLifeTime, &out.RaftEntryCacheLifeTime
		*out = new(string)
		**out = **in
	}
	if in.RaftRejectTransferLeaderDuration != nil {
		in, out := &in.RaftRejectTransferLeaderDuration, &out.RaftRejectTransferLeaderDuration
		*out = new(string)
		**out = **in
	}
	if in.SplitRegionCheckTickInterval != nil {
		in, out := &in.SplitRegionCheckTickInterval, &out.SplitRegionCheckTickInterval
		*out = new(string)
		**out = **in
	}
	if in.RegionSplitCheckDiff != nil {
		in, out := &in.RegionSplitCheckDiff, &out.RegionSplitCheckDiff
		*out = new(string)
		**out = **in
	}
	if in.RegionCompactCheckInterval != nil {
		in, out := &in.RegionCompactCheckInterval, &out.RegionCompactCheckInterval
		*out = new(string)
		**out = **in
	}
	if in.CleanStalePeerDelay != nil {
		in, out := &in.CleanStalePeerDelay, &out.CleanStalePeerDelay
		*out = new(string)
		**out = **in
	}
	if in.RegionCompactCheckStep != nil {
		in, out := &in.RegionCompactCheckStep, &out.RegionCompactCheckStep
		*out = new(int64)
		**out = **in
	}
	if in.RegionCompactMinTombstones != nil {
		in, out := &in.RegionCompactMinTombstones, &out.RegionCompactMinTombstones
		*out = new(int64)
		**out = **in
	}
	if in.RegionCompactTombstonesPercent != nil {
		in, out := &in.RegionCompactTombstonesPercent, &out.RegionCompactTombstonesPercent
		*out = new(int64)
		**out = **in
	}
	if in.PdHeartbeatTickInterval != nil {
		in, out := &in.PdHeartbeatTickInterval, &out.PdHeartbeatTickInterval
		*out = new(string)
		**out = **in
	}
	if in.PdStoreHeartbeatTickInterval != nil {
		in, out := &in.PdStoreHeartbeatTickInterval, &out.PdStoreHeartbeatTickInterval
		*out = new(string)
		**out = **in
	}
	if in.SnapMgrGCTickInterval != nil {
		in, out := &in.SnapMgrGCTickInterval, &out.SnapMgrGCTickInterval
		*out = new(string)
		**out = **in
	}
	if in.SnapGCTimeout != nil {
		in, out := &in.SnapGCTimeout, &out.SnapGCTimeout
		*out = new(string)
		**out = **in
	}
	if in.LockCfCompactInterval != nil {
		in, out := &in.LockCfCompactInterval, &out.LockCfCompactInterval
		*out = new(string)
		**out = **in
	}
	if in.LockCfCompactBytesThreshold != nil {
		in, out := &in.LockCfCompactBytesThreshold, &out.LockCfCompactBytesThreshold
		*out = new(string)
		**out = **in
	}
	if in.NotifyCapacity != nil {
		in, out := &in.NotifyCapacity, &out.NotifyCapacity
		*out = new(int64)
		**out = **in
	}
	if in.MessagesPerTick != nil {
		in, out := &in.MessagesPerTick, &out.MessagesPerTick
		*out = new(int64)
		**out = **in
	}
	if in.MaxPeerDownDuration != nil {
		in, out := &in.MaxPeerDownDuration, &out.MaxPeerDownDuration
		*out = new(string)
		**out = **in
	}
	if in.MaxLeaderMissingDuration != nil {
		in, out := &in.MaxLeaderMissingDuration, &out.MaxLeaderMissingDuration
		*out = new(string)
		**out = **in
	}
	if in.AbnormalLeaderMissingDuration != nil {
		in, out := &in.AbnormalLeaderMissingDuration, &out.AbnormalLeaderMissingDuration
		*out = new(string)
		**out = **in
	}
	if in.PeerStaleStateCheckInterval != nil {
		in, out := &in.PeerStaleStateCheckInterval, &out.PeerStaleStateCheckInterval
		*out = new(string)
		**out = **in
	}
	if in.LeaderTransferMaxLogLag != nil {
		in, out := &in.LeaderTransferMaxLogLag, &out.LeaderTransferMaxLogLag
		*out = new(int64)
		**out = **in
	}
	if in.SnapApplyBatchSize != nil {
		in, out := &in.SnapApplyBatchSize, &out.SnapApplyBatchSize
		*out = new(string)
		**out = **in
	}
	if in.ConsistencyCheckInterval != nil {
		in, out := &in.ConsistencyCheckInterval, &out.ConsistencyCheckInterval
		*out = new(string)
		**out = **in
	}
	if in.ReportRegionFlowInterval != nil {
		in, out := &in.ReportRegionFlowInterval, &out.ReportRegionFlowInterval
		*out = new(string)
		**out = **in
	}
	if in.RaftStoreMaxLeaderLease != nil {
		in, out := &in.RaftStoreMaxLeaderLease, &out.RaftStoreMaxLeaderLease
		*out = new(string)
		**out = **in
	}
	if in.RightDeriveWhenSplit != nil {
		in, out := &in.RightDeriveWhenSplit, &out.RightDeriveWhenSplit
		*out = new(bool)
		**out = **in
	}
	if in.AllowRemoveLeader != nil {
		in, out := &in.AllowRemoveLeader, &out.AllowRemoveLeader
		*out = new(bool)
		**out = **in
	}
	if in.MergeMaxLogGap != nil {
		in, out := &in.MergeMaxLogGap, &out.MergeMaxLogGap
		*out = new(int64)
		**out = **in
	}
	if in.MergeCheckTickInterval != nil {
		in, out := &in.MergeCheckTickInterval, &out.MergeCheckTickInterval
		*out = new(string)
		**out = **in
	}
	if in.UseDeleteRange != nil {
		in, out := &in.UseDeleteRange, &out.UseDeleteRange
		*out = new(bool)
		**out = **in
	}
	if in.CleanupImportSstInterval != nil {
		in, out := &in.CleanupImportSstInterval, &out.CleanupImportSstInterval
		*out = new(string)
		**out = **in
	}
	if in.ApplyMaxBatchSize != nil {
		in, out := &in.ApplyMaxBatchSize, &out.ApplyMaxBatchSize
		*out = new(int64)
		**out = **in
	}
	if in.ApplyPoolSize != nil {
		in, out := &in.ApplyPoolSize, &out.ApplyPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.StoreMaxBatchSize != nil {
		in, out := &in.StoreMaxBatchSize, &out.StoreMaxBatchSize
		*out = new(int64)
		**out = **in
	}
	if in.StorePoolSize != nil {
		in, out := &in.StorePoolSize, &out.StorePoolSize
		*out = new(int64)
		**out = **in
	}
	if in.HibernateRegions != nil {
		in, out := &in.HibernateRegions, &out.HibernateRegions
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVRaftstoreConfig.
func (in *TiKVRaftstoreConfig) DeepCopy() *TiKVRaftstoreConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVRaftstoreConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVReadPoolConfig) DeepCopyInto(out *TiKVReadPoolConfig) {
	*out = *in
	if in.Unified != nil {
		in, out := &in.Unified, &out.Unified
		*out = new(TiKVUnifiedReadPoolConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Coprocessor != nil {
		in, out := &in.Coprocessor, &out.Coprocessor
		*out = new(TiKVCoprocessorReadPoolConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(TiKVStorageReadPoolConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVReadPoolConfig.
func (in *TiKVReadPoolConfig) DeepCopy() *TiKVReadPoolConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVReadPoolConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVSecurityConfig) DeepCopyInto(out *TiKVSecurityConfig) {
	*out = *in
	if in.CAPath != nil {
		in, out := &in.CAPath, &out.CAPath
		*out = new(string)
		**out = **in
	}
	if in.CertPath != nil {
		in, out := &in.CertPath, &out.CertPath
		*out = new(string)
		**out = **in
	}
	if in.KeyPath != nil {
		in, out := &in.KeyPath, &out.KeyPath
		*out = new(string)
		**out = **in
	}
	if in.CertAllowedCN != nil {
		in, out := &in.CertAllowedCN, &out.CertAllowedCN
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.OverrideSslTarget != nil {
		in, out := &in.OverrideSslTarget, &out.OverrideSslTarget
		*out = new(string)
		**out = **in
	}
	if in.CipherFile != nil {
		in, out := &in.CipherFile, &out.CipherFile
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(TiKVSecurityConfigEncryption)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVSecurityConfig.
func (in *TiKVSecurityConfig) DeepCopy() *TiKVSecurityConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVSecurityConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVSecurityConfigEncryption) DeepCopyInto(out *TiKVSecurityConfigEncryption) {
	*out = *in
	if in.DataEncryptionMethod != nil {
		in, out := &in.DataEncryptionMethod, &out.DataEncryptionMethod
		*out = new(string)
		**out = **in
	}
	if in.DataKeyRotationPeriod != nil {
		in, out := &in.DataKeyRotationPeriod, &out.DataKeyRotationPeriod
		*out = new(string)
		**out = **in
	}
	if in.MasterKey != nil {
		in, out := &in.MasterKey, &out.MasterKey
		*out = new(TiKVSecurityConfigEncryptionMasterKey)
		(*in).DeepCopyInto(*out)
	}
	if in.PreviousMasterKey != nil {
		in, out := &in.PreviousMasterKey, &out.PreviousMasterKey
		*out = new(TiKVSecurityConfigEncryptionPreviousMasterKey)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVSecurityConfigEncryption.
func (in *TiKVSecurityConfigEncryption) DeepCopy() *TiKVSecurityConfigEncryption {
	if in == nil {
		return nil
	}
	out := new(TiKVSecurityConfigEncryption)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVSecurityConfigEncryptionMasterKey) DeepCopyInto(out *TiKVSecurityConfigEncryptionMasterKey) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	in.MasterKeyFileConfig.DeepCopyInto(&out.MasterKeyFileConfig)
	in.MasterKeyKMSConfig.DeepCopyInto(&out.MasterKeyKMSConfig)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVSecurityConfigEncryptionMasterKey.
func (in *TiKVSecurityConfigEncryptionMasterKey) DeepCopy() *TiKVSecurityConfigEncryptionMasterKey {
	if in == nil {
		return nil
	}
	out := new(TiKVSecurityConfigEncryptionMasterKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVSecurityConfigEncryptionPreviousMasterKey) DeepCopyInto(out *TiKVSecurityConfigEncryptionPreviousMasterKey) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	in.MasterKeyFileConfig.DeepCopyInto(&out.MasterKeyFileConfig)
	in.MasterKeyKMSConfig.DeepCopyInto(&out.MasterKeyKMSConfig)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVSecurityConfigEncryptionPreviousMasterKey.
func (in *TiKVSecurityConfigEncryptionPreviousMasterKey) DeepCopy() *TiKVSecurityConfigEncryptionPreviousMasterKey {
	if in == nil {
		return nil
	}
	out := new(TiKVSecurityConfigEncryptionPreviousMasterKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVServerConfig) DeepCopyInto(out *TiKVServerConfig) {
	*out = *in
	if in.StatusThreadPoolSize != nil {
		in, out := &in.StatusThreadPoolSize, &out.StatusThreadPoolSize
		*out = new(string)
		**out = **in
	}
	if in.GrpcCompressionType != nil {
		in, out := &in.GrpcCompressionType, &out.GrpcCompressionType
		*out = new(string)
		**out = **in
	}
	if in.GrpcConcurrency != nil {
		in, out := &in.GrpcConcurrency, &out.GrpcConcurrency
		*out = new(uint)
		**out = **in
	}
	if in.GrpcConcurrentStream != nil {
		in, out := &in.GrpcConcurrentStream, &out.GrpcConcurrentStream
		*out = new(uint)
		**out = **in
	}
	if in.GrpcMemoryQuota != nil {
		in, out := &in.GrpcMemoryQuota, &out.GrpcMemoryQuota
		*out = new(string)
		**out = **in
	}
	if in.GrpcRaftConnNum != nil {
		in, out := &in.GrpcRaftConnNum, &out.GrpcRaftConnNum
		*out = new(uint)
		**out = **in
	}
	if in.GrpcStreamInitialWindowSize != nil {
		in, out := &in.GrpcStreamInitialWindowSize, &out.GrpcStreamInitialWindowSize
		*out = new(string)
		**out = **in
	}
	if in.GrpcKeepaliveTime != nil {
		in, out := &in.GrpcKeepaliveTime, &out.GrpcKeepaliveTime
		*out = new(string)
		**out = **in
	}
	if in.GrpcKeepaliveTimeout != nil {
		in, out := &in.GrpcKeepaliveTimeout, &out.GrpcKeepaliveTimeout
		*out = new(string)
		**out = **in
	}
	if in.ConcurrentSendSnapLimit != nil {
		in, out := &in.ConcurrentSendSnapLimit, &out.ConcurrentSendSnapLimit
		*out = new(uint)
		**out = **in
	}
	if in.ConcurrentRecvSnapLimit != nil {
		in, out := &in.ConcurrentRecvSnapLimit, &out.ConcurrentRecvSnapLimit
		*out = new(uint)
		**out = **in
	}
	if in.EndPointRecursionLimit != nil {
		in, out := &in.EndPointRecursionLimit, &out.EndPointRecursionLimit
		*out = new(uint)
		**out = **in
	}
	if in.EndPointStreamChannelSize != nil {
		in, out := &in.EndPointStreamChannelSize, &out.EndPointStreamChannelSize
		*out = new(uint)
		**out = **in
	}
	if in.EndPointBatchRowLimit != nil {
		in, out := &in.EndPointBatchRowLimit, &out.EndPointBatchRowLimit
		*out = new(uint)
		**out = **in
	}
	if in.EndPointStreamBatchRowLimit != nil {
		in, out := &in.EndPointStreamBatchRowLimit, &out.EndPointStreamBatchRowLimit
		*out = new(uint)
		**out = **in
	}
	if in.EndPointEnableBatchIfPossible != nil {
		in, out := &in.EndPointEnableBatchIfPossible, &out.EndPointEnableBatchIfPossible
		*out = new(uint)
		**out = **in
	}
	if in.EndPointRequestMaxHandleDuration != nil {
		in, out := &in.EndPointRequestMaxHandleDuration, &out.EndPointRequestMaxHandleDuration
		*out = new(string)
		**out = **in
	}
	if in.SnapMaxWriteBytesPerSec != nil {
		in, out := &in.SnapMaxWriteBytesPerSec, &out.SnapMaxWriteBytesPerSec
		*out = new(string)
		**out = **in
	}
	if in.SnapMaxTotalSize != nil {
		in, out := &in.SnapMaxTotalSize, &out.SnapMaxTotalSize
		*out = new(string)
		**out = **in
	}
	if in.StatsConcurrency != nil {
		in, out := &in.StatsConcurrency, &out.StatsConcurrency
		*out = new(uint)
		**out = **in
	}
	if in.HeavyLoadThreshold != nil {
		in, out := &in.HeavyLoadThreshold, &out.HeavyLoadThreshold
		*out = new(uint)
		**out = **in
	}
	if in.HeavyLoadWaitDuration != nil {
		in, out := &in.HeavyLoadWaitDuration, &out.HeavyLoadWaitDuration
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EnableRequestBatch != nil {
		in, out := &in.EnableRequestBatch, &out.EnableRequestBatch
		*out = new(bool)
		**out = **in
	}
	if in.RequestBatchEnableCrossCommand != nil {
		in, out := &in.RequestBatchEnableCrossCommand, &out.RequestBatchEnableCrossCommand
		*out = new(bool)
		**out = **in
	}
	if in.RequestBatchWaitDuration != nil {
		in, out := &in.RequestBatchWaitDuration, &out.RequestBatchWaitDuration
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVServerConfig.
func (in *TiKVServerConfig) DeepCopy() *TiKVServerConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVServerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVSpec) DeepCopyInto(out *TiKVSpec) {
	*out = *in
	in.ComponentSpec.DeepCopyInto(&out.ComponentSpec)
	in.ResourceRequirements.DeepCopyInto(&out.ResourceRequirements)
	if in.Privileged != nil {
		in, out := &in.Privileged, &out.Privileged
		*out = new(bool)
		**out = **in
	}
	if in.MaxFailoverCount != nil {
		in, out := &in.MaxFailoverCount, &out.MaxFailoverCount
		*out = new(int32)
		**out = **in
	}
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(TiKVConfig)
		(*in).DeepCopyInto(*out)
	}
	in.ListenersConfig.DeepCopyInto(&out.ListenersConfig)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVSpec.
func (in *TiKVSpec) DeepCopy() *TiKVSpec {
	if in == nil {
		return nil
	}
	out := new(TiKVSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVStatus) DeepCopyInto(out *TiKVStatus) {
	*out = *in
	if in.StatefulSet != nil {
		in, out := &in.StatefulSet, &out.StatefulSet
		*out = new(appsv1.StatefulSetStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.Stores != nil {
		in, out := &in.Stores, &out.Stores
		*out = make(map[string]TiKVStore, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.TombstoneStores != nil {
		in, out := &in.TombstoneStores, &out.TombstoneStores
		*out = make(map[string]TiKVStore, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.FailureStores != nil {
		in, out := &in.FailureStores, &out.FailureStores
		*out = make(map[string]TiKVFailureStore, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVStatus.
func (in *TiKVStatus) DeepCopy() *TiKVStatus {
	if in == nil {
		return nil
	}
	out := new(TiKVStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVStorageConfig) DeepCopyInto(out *TiKVStorageConfig) {
	*out = *in
	if in.MaxKeySize != nil {
		in, out := &in.MaxKeySize, &out.MaxKeySize
		*out = new(int64)
		**out = **in
	}
	if in.SchedulerNotifyCapacity != nil {
		in, out := &in.SchedulerNotifyCapacity, &out.SchedulerNotifyCapacity
		*out = new(int64)
		**out = **in
	}
	if in.SchedulerConcurrency != nil {
		in, out := &in.SchedulerConcurrency, &out.SchedulerConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.SchedulerWorkerPoolSize != nil {
		in, out := &in.SchedulerWorkerPoolSize, &out.SchedulerWorkerPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.SchedulerPendingWriteThreshold != nil {
		in, out := &in.SchedulerPendingWriteThreshold, &out.SchedulerPendingWriteThreshold
		*out = new(string)
		**out = **in
	}
	if in.BlockCache != nil {
		in, out := &in.BlockCache, &out.BlockCache
		*out = new(TiKVBlockCacheConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ReserveSpace != nil {
		in, out := &in.ReserveSpace, &out.ReserveSpace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVStorageConfig.
func (in *TiKVStorageConfig) DeepCopy() *TiKVStorageConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVStorageConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVStorageReadPoolConfig) DeepCopyInto(out *TiKVStorageReadPoolConfig) {
	*out = *in
	if in.HighConcurrency != nil {
		in, out := &in.HighConcurrency, &out.HighConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.NormalConcurrency != nil {
		in, out := &in.NormalConcurrency, &out.NormalConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.LowConcurrency != nil {
		in, out := &in.LowConcurrency, &out.LowConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerHigh != nil {
		in, out := &in.MaxTasksPerWorkerHigh, &out.MaxTasksPerWorkerHigh
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerNormal != nil {
		in, out := &in.MaxTasksPerWorkerNormal, &out.MaxTasksPerWorkerNormal
		*out = new(int64)
		**out = **in
	}
	if in.MaxTasksPerWorkerLow != nil {
		in, out := &in.MaxTasksPerWorkerLow, &out.MaxTasksPerWorkerLow
		*out = new(int64)
		**out = **in
	}
	if in.StackSize != nil {
		in, out := &in.StackSize, &out.StackSize
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVStorageReadPoolConfig.
func (in *TiKVStorageReadPoolConfig) DeepCopy() *TiKVStorageReadPoolConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVStorageReadPoolConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVStore) DeepCopyInto(out *TiKVStore) {
	*out = *in
	in.LastHeartbeatTime.DeepCopyInto(&out.LastHeartbeatTime)
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVStore.
func (in *TiKVStore) DeepCopy() *TiKVStore {
	if in == nil {
		return nil
	}
	out := new(TiKVStore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVTitanCfConfig) DeepCopyInto(out *TiKVTitanCfConfig) {
	*out = *in
	if in.MinBlobSize != nil {
		in, out := &in.MinBlobSize, &out.MinBlobSize
		*out = new(string)
		**out = **in
	}
	if in.BlobFileCompression != nil {
		in, out := &in.BlobFileCompression, &out.BlobFileCompression
		*out = new(string)
		**out = **in
	}
	if in.BlobCacheSize != nil {
		in, out := &in.BlobCacheSize, &out.BlobCacheSize
		*out = new(string)
		**out = **in
	}
	if in.MinGcBatchSize != nil {
		in, out := &in.MinGcBatchSize, &out.MinGcBatchSize
		*out = new(string)
		**out = **in
	}
	if in.MaxGcBatchSize != nil {
		in, out := &in.MaxGcBatchSize, &out.MaxGcBatchSize
		*out = new(string)
		**out = **in
	}
	if in.DiscardableRatio != nil {
		in, out := &in.DiscardableRatio, &out.DiscardableRatio
		*out = new(float64)
		**out = **in
	}
	if in.SampleRatio != nil {
		in, out := &in.SampleRatio, &out.SampleRatio
		*out = new(float64)
		**out = **in
	}
	if in.MergeSmallFileThreshold != nil {
		in, out := &in.MergeSmallFileThreshold, &out.MergeSmallFileThreshold
		*out = new(string)
		**out = **in
	}
	if in.BlobRunMode != nil {
		in, out := &in.BlobRunMode, &out.BlobRunMode
		*out = new(string)
		**out = **in
	}
	if in.LevelMerge != nil {
		in, out := &in.LevelMerge, &out.LevelMerge
		*out = new(bool)
		**out = **in
	}
	if in.GcMergeRewrite != nil {
		in, out := &in.GcMergeRewrite, &out.GcMergeRewrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVTitanCfConfig.
func (in *TiKVTitanCfConfig) DeepCopy() *TiKVTitanCfConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVTitanCfConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVTitanDBConfig) DeepCopyInto(out *TiKVTitanDBConfig) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Dirname != nil {
		in, out := &in.Dirname, &out.Dirname
		*out = new(string)
		**out = **in
	}
	if in.DisableGc != nil {
		in, out := &in.DisableGc, &out.DisableGc
		*out = new(bool)
		**out = **in
	}
	if in.MaxBackgroundGc != nil {
		in, out := &in.MaxBackgroundGc, &out.MaxBackgroundGc
		*out = new(int64)
		**out = **in
	}
	if in.PurgeObsoleteFilesPeriod != nil {
		in, out := &in.PurgeObsoleteFilesPeriod, &out.PurgeObsoleteFilesPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVTitanDBConfig.
func (in *TiKVTitanDBConfig) DeepCopy() *TiKVTitanDBConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVTitanDBConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TiKVUnifiedReadPoolConfig) DeepCopyInto(out *TiKVUnifiedReadPoolConfig) {
	*out = *in
	if in.MinThreadCount != nil {
		in, out := &in.MinThreadCount, &out.MinThreadCount
		*out = new(int32)
		**out = **in
	}
	if in.MaxThreadCount != nil {
		in, out := &in.MaxThreadCount, &out.MaxThreadCount
		*out = new(int32)
		**out = **in
	}
	if in.StackSize != nil {
		in, out := &in.StackSize, &out.StackSize
		*out = new(string)
		**out = **in
	}
	if in.MaxTasksPerWorker != nil {
		in, out := &in.MaxTasksPerWorker, &out.MaxTasksPerWorker
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TiKVUnifiedReadPoolConfig.
func (in *TiKVUnifiedReadPoolConfig) DeepCopy() *TiKVUnifiedReadPoolConfig {
	if in == nil {
		return nil
	}
	out := new(TiKVUnifiedReadPoolConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TikvCluster) DeepCopyInto(out *TikvCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TikvCluster.
func (in *TikvCluster) DeepCopy() *TikvCluster {
	if in == nil {
		return nil
	}
	out := new(TikvCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TikvCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TikvClusterCondition) DeepCopyInto(out *TikvClusterCondition) {
	*out = *in
	in.LastUpdateTime.DeepCopyInto(&out.LastUpdateTime)
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TikvClusterCondition.
func (in *TikvClusterCondition) DeepCopy() *TikvClusterCondition {
	if in == nil {
		return nil
	}
	out := new(TikvClusterCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TikvClusterList) DeepCopyInto(out *TikvClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TikvCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TikvClusterList.
func (in *TikvClusterList) DeepCopy() *TikvClusterList {
	if in == nil {
		return nil
	}
	out := new(TikvClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TikvClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TikvClusterSpec) DeepCopyInto(out *TikvClusterSpec) {
	*out = *in
	in.Discovery.DeepCopyInto(&out.Discovery)
	in.PD.DeepCopyInto(&out.PD)
	in.TiKV.DeepCopyInto(&out.TiKV)
	if in.HostNetwork != nil {
		in, out := &in.HostNetwork, &out.HostNetwork
		*out = new(bool)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TikvClusterSpec.
func (in *TikvClusterSpec) DeepCopy() *TikvClusterSpec {
	if in == nil {
		return nil
	}
	out := new(TikvClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TikvClusterStatus) DeepCopyInto(out *TikvClusterStatus) {
	*out = *in
	in.PD.DeepCopyInto(&out.PD)
	in.TiKV.DeepCopyInto(&out.TiKV)
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]TikvClusterCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TikvClusterStatus.
func (in *TikvClusterStatus) DeepCopy() *TikvClusterStatus {
	if in == nil {
		return nil
	}
	out := new(TikvClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UnjoinedMember) DeepCopyInto(out *UnjoinedMember) {
	*out = *in
	in.CreatedAt.DeepCopyInto(&out.CreatedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UnjoinedMember.
func (in *UnjoinedMember) DeepCopy() *UnjoinedMember {
	if in == nil {
		return nil
	}
	out := new(UnjoinedMember)
	in.DeepCopyInto(out)
	return out
}
