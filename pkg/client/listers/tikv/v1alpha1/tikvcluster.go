// Copyright TiKV Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tikv/tikv-operator/pkg/apis/tikv/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TikvClusterLister helps list TikvClusters.
type TikvClusterLister interface {
	// List lists all TikvClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TikvCluster, err error)
	// TikvClusters returns an object that can list and get TikvClusters.
	TikvClusters(namespace string) TikvClusterNamespaceLister
	TikvClusterListerExpansion
}

// tikvClusterLister implements the TikvClusterLister interface.
type tikvClusterLister struct {
	indexer cache.Indexer
}

// NewTikvClusterLister returns a new TikvClusterLister.
func NewTikvClusterLister(indexer cache.Indexer) TikvClusterLister {
	return &tikvClusterLister{indexer: indexer}
}

// List lists all TikvClusters in the indexer.
func (s *tikvClusterLister) List(selector labels.Selector) (ret []*v1alpha1.TikvCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TikvCluster))
	})
	return ret, err
}

// TikvClusters returns an object that can list and get TikvClusters.
func (s *tikvClusterLister) TikvClusters(namespace string) TikvClusterNamespaceLister {
	return tikvClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TikvClusterNamespaceLister helps list and get TikvClusters.
type TikvClusterNamespaceLister interface {
	// List lists all TikvClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TikvCluster, err error)
	// Get retrieves the TikvCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TikvCluster, error)
	TikvClusterNamespaceListerExpansion
}

// tikvClusterNamespaceLister implements the TikvClusterNamespaceLister
// interface.
type tikvClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TikvClusters in the indexer for a given namespace.
func (s tikvClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TikvCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TikvCluster))
	})
	return ret, err
}

// Get retrieves the TikvCluster from the indexer for a given namespace and name.
func (s tikvClusterNamespaceLister) Get(name string) (*v1alpha1.TikvCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tikvcluster"), name)
	}
	return obj.(*v1alpha1.TikvCluster), nil
}
